#============================================================================
#title          :~/.bashrc
#description    :excuted by bash(1) for interactive shells for interactive
#				 shells the latest version is always at
#				 /etc/defaults/etc/skel/.bashrc (do not modify)
#author         :Gary Furash
#date           :20140422
#version        :1
#usage          :~/.bashrc
#notes          :
#bash_version   :4.1.11(2)-release
#============================================================================

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

#-------------------------------------------------------------------------------
# source global definitions (if any)
#-------------------------------------------------------------------------------
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

if [ -f /etc/profile ]; then
	. /etc/profile
fi

#-------------------------------------------------------------------------------
# System Settings
#-------------------------------------------------------------------------------
export EDITOR=vi				# use the VI editor for line editing
export HISTIGNORE="&:bg:fg:ll:h"
export HOSTFILE=$HOME/.hosts	# Put a list of remote hosts in ~/.hosts
export LC_ALL='C'                # sort ignores problem characters
export TERM=xterm-256color 		# render in 256 colors
export TIMEFORMAT=$'\nreal %3R	user %3U	sys %3S	pcpu %P\n'
set -o ignoreeof                 # don't use ^D to exit
set -o noclobber
set -o notify                    # don't wait for job termination notification
set -o vi                        # use VI for editing
set nocompatible
set nodosfilewarnings            # turn off dos file warnings
shopt -s cdable_vars
shopt -s cdspell                 # When changing directory small typos can be ignoRED by bash
shopt -s checkhash
shopt -s checkwinsize
shopt -s extglob                 # necessary for programmable completion
shopt -s no_empty_cmd_completion # bash>=2.04 only
shopt -s nocaseglob              # Use case-insensitive filename globbing
shopt -s sourcepath
ulimit -S -c 0                   # Don't want any coREDumps

if [[ ${BASH_VERSINFO[0]} == 4 ]]; then
	shopt -s globstar                        #enable '**/*' (recursive)
fi

#-------------------------------------------------------------------------------
# Bash History Configuration
#-------------------------------------------------------------------------------
shopt -s cmdhist
shopt -s histappend histreedit histverify

# Any completions you add in ~/.bash_completion are sourced last.
[[ -f /etc/bash_completion ]] && . /etc/bash_completion

# Don't put duplicate lines in the history.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoREDups

# Ignore some controlling instructions
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well

# Whenever displaying the prompt, write the previous line to disk
export PROMPT_COMMAND="history -a"

#----------------------------------------------------------------------------
# functions
#----------------------------------------------------------------------------
if [ -f ~/.bash_functions ]; then
	source ~/.bash_functions
fi

#-------------------------------------------------------------------------------
# Environment Variables
#-------------------------------------------------------------------------------
if [ -z "$RANPROFILE" ]; then
	export RANPROFILE=true

	if [[ ${BASH_VERSINFO[5]} == *cygwin* ]]; then
		export PATH="/usr/local/bin:/usr/bin:/bin:/sbin"
		addtopath /cygdrive/c/Windows/SysWOW64 /cygdrive/c/Windows/System32
	fi

	#include any local environment variables
	#TODO: get via ~/etc/_bash_{$COMPUTERNAME/HOSTNAME}
	if [ -f ~/.bash_local ]; then
		source ~/.bash_local
	fi
fi

addtopath ~/script

if [ -d ~/perl5 ]; then
	PERL_MB_OPT="--install_base \"~/perl5\""; export PERL_MB_OPT;
	PERL_MM_OPT="INSTALL_BASE=~/perl5"; export PERL_MM_OPT;
	addtopath ~/perl5/bin
fi

if [ -n "$OCI_HOME" ]; then
	addtopath $OCI_HOME
fi
export PYTHONSTARTUP=~/.pystartup

if [ -n "~/script/scalalikejdbc-cli" ]; then
	addtopath ~/script/scalalikejdbc-cli
fi

if [ -n "$JYTHON_HOME" ]; then
	addtopath $JYTHON_HOME
fi

if [ -n "$SCALA_HOME" ]; then
	addtopath $SCALA_HOME/bin
fi

if [ -n "$JAVA_HOME" ]; then
	addtopath $JAVA_HOME/bin
fi

if [ -n "$ANT_HOME" ]; then
	addtopath $ANT_HOME/bin
fi

# remove duplicate entries from PATH
export PATH=`awk -F: '{for (i=1;i<=NF;i++) { if ( !x[$i]++ ) printf("%s:",$i); }}' <<< $PATH`
# remove trailing characters from PATH
export PATH=$(sed 's/:$//ig' <<< $PATH)

#------------------------------------------------------------------------------
# aliases
#------------------------------------------------------------------------------
if [ -f ~/.bash_aliases ]; then
	source ~/.bash_aliases
fi

#------------------------------------------------------------------------------
# setup colors and prompt
#------------------------------------------------------------------------------
if [ -f ~/.dircolors ]; then
	eval `dircolors ~/.dircolors`
fi

# Regular Colors
BLACK='\e[0;30m'        # BLACK
BLUE='\e[0;34m'         # BLUE
CHECKMARK='\342\234\223'
CYAN='\e[0;36m'         # Cyan
FANCYX='\342\234\227'
GREEN='\e[0;32m'        # GREEN
NC='\e[0m'              # Text RESET
PURPle='\e[0;35m'       # Purple
RED='\e[0;31m'          # RED
RESET='\e[0m'              # Text RESET
WHITE='\e[0;37m'        # WHITE
YELLOW='\e[0;33m'       # Yellow

# run on startup
if [[ -f ~/.dircolors ]]; then
	eval `dircolors -b ~/.dircolors`
fi
echo -e "${CYAN}This is BASH ${RED}${BASH_VERSION%.*}${CYAN}${NC}"
date

# Set up syntax highlighting for 'less' (requires source-highlight package)
# See http://www.gnu.org/software/src-highlite/source-highlight.html
export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
export LESS=' -R '

# display git repository status on prompt
#if which git >/dev/null; then
	#GIT_ENABLED='Y'
	#source ~/script/git-prompt.sh
	#export GIT_PS1_SHOWDIRTYSTATE='Y'       # show staged (*) and unstaged (+)
	#export GIT_PS1_SHOWSTASHSTATE='Y'       # show stashed ($)
	#export GIT_PS1_SHOWUNTRACKEDFILES='Y'   # show untracked (%)
	#export GIT_PS1_=SHOWUPSTREAM="auto"     # show behind (<), ahead (>), diverged (=), none (=)
#fi

set_prompt () {
    Last_Command=$? # Must come first!

    # Add a bright WHITE exit status for the last command
    PS1="\n$WHITE\$? "

    # If it was successful, print a GREEN check mark. Otherwise, print
    # a RED X.
    if [[ $Last_Command == 0 ]]; then
        PS1+="$GREEN$CHECKMARK "
    else
        PS1+="$RED$FANCYX "
    fi
    # If root, just print the host in RED. Otherwise, print the current user
    # and host in GREEN.
    if [[ $EUID == 0 ]]; then
        PS1+="$RED \\h"
    else
        PS1+="$GREEN \\h"
    fi

	PS1+="$BLUE[`date +%m/%d`][\w]${RESET}\n[\A] \$ "
}
export -f set_prompt
PROMPT_COMMAND='set_prompt'
#EOF
