# add the following line to your ~/.bashrc and ~/.bash_profile files
# [ -f "${HOME}/etc/_bashrc" ] && . ${HOME}/etc/_bashrc

#-------------------------------------------------------------------------------
# do not run ?
#-------------------------------------------------------------------------------
# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# only run once
[ -n "$RANPROFILE" ] && return
export RANPROFILE=true

#-------------------------------------------------------------------------------
# System Settings
#-------------------------------------------------------------------------------
export EDITOR=vi				# use the VI editor for line editing
export HISTIGNORE="&:bg:fg:ll:h"
export HOSTFILE=$HOME/.hosts	# Put a list of remote hosts in ~/.hosts
export LC_ALL='C'                # sort ignores problem characters
export TERM=xterm-256color 		# render in 256 colors
export TIMEFORMAT=$'\nreal %3R	user %3U	sys %3S	pcpu %P\n'
set -o ignoreeof                 # don't use ^D to exit
set -o noclobber
set -o notify                    # don't wait for job termination notification
set nodosfilewarnings            # turn off dos file warnings
shopt -s cdable_vars
shopt -s cdspell                 # When changing directory small typos can be ignoRED by bash
shopt -s checkhash
shopt -s checkwinsize
shopt -s extglob                 # necessary for programmable completion
shopt -s no_empty_cmd_completion # bash>=2.04 only
shopt -s nocaseglob              # Use case-insensitive filename globbing
shopt -s sourcepath
ulimit -S -c 0                   # Don't want any coREDumps

# set alt-e as a toggle for VI line editing, default to EMACS
echo "use alt-e to toggle between editing modes"
set -o vi
bind '"\ee": emacs-editing-mode'
set -o emacs
bind '"\ee": vi-editing-mode'

#-------------------------------------------------------------------------------
# History Options
#-------------------------------------------------------------------------------
# Don't put duplicate lines in the history.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well

#Whenever displaying the prompt, write the previous line to disk
export PROMPT_COMMAND="history -a"

#----------------------------------------------------------------------------
# commonly used functions
#----------------------------------------------------------------------------
pathremove () {
	local IFS=':'
	local NEWPATH
	local DIR
	local PATHVARIABLE=${2:-PATH}
	for DIR in ${!PATHVARIABLE} ; do
			if [ "$DIR" != "$1" ] ; then
				NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
			fi
	done
	export $PATHVARIABLE="$NEWPATH"
}
export -f pathremove

pathprepend () {
	pathremove $1 $2
	local PATHVARIABLE=${2:-PATH}
	export $PATHVARIABLE="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}
export -f pathprepend

pathappend () {
	pathremove $1 $2
	local PATHVARIABLE=${2:-PATH}
	#TODO incorporate ADDTOPATH CYGPATH
	if [ -f $1 ]; then
		export $PATHVARIABLE="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
	fi
}
export -f pathappend

function bashify {	# convert environment variable to cygwin format
	if [[ ${BASH_VERSINFO[5]} == *cygwin* ]]; then
		local p
		for p ; do
		 if [ "${!p}" ] ; then
			   eval 'export '$p'=$(cygpath -pu "$'$p'")'
		 fi
		done
	fi
}
export -f bashify

function addtopath { # add value to path if it does not exist
	local p=${1%/} 				# remove trailing slash

	if [ -d "$p" ]; then
		if [[ ${BASH_VERSINFO[5]} == *cygwin* ]]; then
			p=`cygpath -pu $p`
		fi

		# TODO: figure out how to use pathremove

		# don't add it if it exists already
		if [[ "${PATH}" != *:"${p}":* ]] ; then
			export PATH=$PATH:$p
		fi
	fi
}
export -f addtopath

# Truncate oversized lines on input. Mostly for display use. Example: grep foo log | fitterm
fitterm () { cut -c 1-$( tput cols ) ; }
export -f fitterm

# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
cd_func () {
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}
export -f cd_func
alias cd=cd_func

function ll(){ ls -l "$@"| egrep "^d" ; ls -lXB "$@" 2>&-| egrep -v "^d|total "; }
export -f ll

# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'$*'*' -ls ; }
export -f ff

# Find a file with pattern $1 in name and Execute $2 on it:
function fe() { find . -type f -iname '*'$1'*' -exec "${2:-file}" {} \;		; }
export -f fe

function fstr() { # find pattern in a set of filesand highlight them
	OPTIND=1
	local case=""
	local usage="fstr: find string in files.  Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
	while getopts :it opt; do
		case "$opt" in
			i) case="-i " ;;
			*) echo "$usage"; return;;
		esac
	done
	shift $(( $OPTIND - 1 ))
	if [ "$#" -lt 1 ]; then
		echo "$usage"
		return;
	fi
	local SMSO=$(tput smso)
	local RMSO=$(tput rmso)
	find . -type f -name "${2:-*}" -print0 | xargs -0 grep -sn ${case} "$1" 2>&- | \
	sed "s/$1/${SMSO}\0${RMSO}/gI" | more
}
export -f fstr

function cuttail() { # cut last n lines in file, 10 by default
	nlines=${2:-10}
	sed -n -e :a -e "1,${nlines}!{P;N;D;};N;ba" $1
}

function lowercase() { # move filenames to lowercase
	 for file ; do
		filename=${file##*/}
		case "$filename" in
		 */*) dirname==${file%/*} ;;
		 *) dirname=.;;
		esac
		nf=$(echo $filename | tr A-Z a-z)
		newname="${dirname}/${nf}"
		if [ "$nf" != "$filename" ]; then
		 mv "$file" "$newname"
		 echo "lowercase: $file --> $newname"
		else
		 echo "lowercase: $file not changed."
		fi
	done
}
export -f lowercase

function ccd {	# clear the screen, change directory, list contents
	clear
	cd "$1"
	l
}
export -f ccd

function dateprefix { # add YYYYMM to files in %CD%
	date_prefix=$(date + %Y%m)
	for file in *.*
	do
		mv $file		"$date_prefix ${file%.*}.${file##*.}"
	done
}
export -f dateprefix

function extract () {
	if [ ! -f "$1" ] ; then
		echo "'$1' is not a valid file!"
		return 1
	fi

	# Assoc. array of commands for extracting archives
	declare -A xcmd
	xcmd=(
		[.tar.bz2]="tar xvjf"
		[.tar.gz]="tar xvzf"
		[.bz2]="bunzip2"
		[.rar]="unrar x"
		[.gz]="gunzip"
		[.tar]="tar xvf"
		[.zip]="unzip"
		[.Z]="uncompress"
		[.7z]="7z x"
	)
	# extension aliases
	xcmd[.tbz2]="${xcmd[.tar.bz2]}"
	xcmd[.tgz]="${xcmd[.tar.gz]}"

	# See which extension the given file uses
	fext=""
	for i in ${!xcmd[@]}; do
		if [ $(grep -o ".\{${#i}\}$" <<< $1) == "$i" ]; then
			fext="$i"
			break
		fi
	done

	# Die if we couldn't discover what archive type it is
	if [ -z "$fext" ]; then
		echo "don't know how to extract '$1'..."
		return 1
	fi

	# Extract & cd if we can
	fbase=$(basename "$1" "$fext")
	if ${xcmd[$fext]} "$1" && [ -d "$fbase" ]; then
		cd "$fbase"
	fi
}
export -f extract

function uppercase() {		# move filenames to uppercase
	for file ; do
	filename=${file##*/}
	case "$filename" in
	*/*) dirname==${file%/*} ;;
	*) dirname=.;;
	esac
	nf=$(echo $filename | tr a-z A-Z)
	newname="${dirname}/${nf}"
	if [ "$nf" != "$filename" ]; then
		mv "$file" "$newname"
		echo "uppercase: $file --> $newname"
	else
		echo "uppercase: $file not changed."
	fi
	done
}
export -f uppercase

function swap() {				 # swap 2 filenames around
	local TMPFILE=tmp.$$
	mv "$1" $TMPFILE
	mv "$2" "$1"
	mv $TMPFILE "$2"
}
export -f swap

bak () { # save a copy of a file with a file stamp
	filename="$(basename "$1")"
	extension="${filename##*.}"
	filename="${filename%.*}"
	filetime=$(date -r "$1" +%Y%m%d$H%M%S)
	cp "$1" ${filename}_${filetime}.${extension}
}
export -f bak

function ii() { # get current host related info
	echo -e "\nYou are logged on ${RED}$HOST"
	echo -e "\nAdditionnal information:$NC " ; uname -a
	echo -e "\n${RED}Users logged on:$NC " ; w -h
	echo -e "\n${RED}Current date :$NC " ; date
	echo -e "\n${RED}Memory stats :$NC " ; free
	my_ip 2>&- ;
	echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
	echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
	echo
}
export -f ii

function repeat() { # repeat n times command
	local i max
	max=$1; shift;
	for ((i=1; i <= max ; i++)); do		# --> C-like syntax
		eval "$@";
	done
}
export -f repeat

function cdb() {
	USAGE="Usage: cdb [-c|-g|-d|-l] [bookmark]" ;
	if		[ ! -e ~/.cd_bookmarks ] ; then
	mkdir ~/.cd_bookmarks
	fi

	case $1 in
		# create bookmark
		-c) shift
			if [ ! -f ~/.cd_bookmarks/$1 ] ; then
				echo "cd `pwd`" > ~/.cd_bookmarks/"$1" ;
			else
				echo "Try again! Looks like there is already a bookmark '$1'"
			fi
			;;
		# goto bookmark
		-g) shift
			if [ -f ~/.cd_bookmarks/$1 ] ; then
				source ~/.cd_bookmarks/"$1"
			else
				echo "Mmm...looks like your bookmark has spontaneously combusted. What I mean to say is that your bookmark does not exist." ;
			fi
			;;
		# delete bookmark
		-d) shift
			if [ -f ~/.cd_bookmarks/$1 ] ; then
				rm -rf ~/.cd_bookmarks/"$1" ;
			else
				echo "Oops, forgot to specify the bookmark" ;
			fi
			;;
		# list bookmarks
		-l) shift
			ls -l ~/.cd_bookmarks/ ;
			;;
		*) echo "$USAGE" ;
			;;
	esac
}
export -f cdb

# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
cd_func () {
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}
alias cd=cd_func

#-------------------------------------------------------------------------------
# environment variables
#-------------------------------------------------------------------------------

if [[ ${BASH_VERSINFO[5]} == *cygwin* ]]; then
	export PATH="/usr/local/bin:/usr/bin:/bin:/sbin"
	addtopath /cygdrive/c/Windows/SysWOW64 /cygdrive/c/Windows/System32
	export JAVA_HOME=$(cygpath -ua "$JAVA_HOME")
	addtopath $JAVA_HOME/bin
fi

#include any local environment variables
[ -f "${HOME}/etc/_bashrc_$HOSTNAME" ] && . "${HOME}/etc/_bashrc_${HOSTNAME}"

# add binaries and scripts
addtopath $HOME/bin

export PYTHONSTARTUP=~/.pystartup

# remove duplicate entries from PATH
export PATH=`awk -F: '{for (i=1;i<=NF;i++) { if ( !x[$i]++ ) printf("%s:",$i); }}' <<< $PATH`
# remove trailing characters from PATH
export PATH=$(sed 's/:$//ig' <<< $PATH)

#------------------------------------------------------------------------------
# aliases
#------------------------------------------------------------------------------
alias PATH="echo $PATH | tr ':' '\n'"			# show the path in a human-readable format
alias dir='ls --color --format=vertical'
alias egrep='egrep --color=auto'                                                                  # show differences in colour
alias explorer='cyg-wrapper.sh "explorer" --slashed-opt'
alias fgrep='fgrep --color=auto'                                                                  # show differences in colour
alias gitlog='git log --pretty=format:"[%h] %ae, %ar: %s" --stat'
alias grep='grep --color'                                                                         # show differences in colour
alias gtypist='gtypist -wi'
alias h='history'
alias j='jobs -l'
alias jjs='rlwrap $JAVA_HOME/bin/jjs'
alias jpgtopdf='for f in *.jp*g ; do convert ./"$f" ./"${f%.jpg}.pdf"; done'
alias ld='du -hs * | grep -e "^[0-9].*G\s" -e "^[0-9].*M\s" | sort -n -k 2,2 -s'
alias less='less -r'                                                                              # raw control characters
alias ltree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'" 	# print a directory tree
alias markdown='python3 -m markdown  '
alias mkdir='mkdir -p'                                                                            # Prevents accidentally clobbering files.
alias more='less'                                                                                 # more is less
alias mv='mv -i'                                                                                  # Prevents accidentally clobbering files.
alias myadd='find . -type l >> .gitignore; sort -u .gitignore -o .gitignore; git add .'
alias mydiff='diff -ywEa --suppress-common-lines --minimal'                                       # personal zip preferences
alias nospace="perl /usr/local/bin/rename 's/ /_' *"                                              # underscore all files in dir
#TODO: move this to a script
if [[ ${BASH_VERSINFO[5]} == *cygwin* ]]; then
	alias pdfbox='java -jar $(cygpath -was "$USERPROFILE\\bin\\pdfbox--app-1.8.7.jar") '
else
	alias pdfbox='java -jar ~/bin/pdfbox-app-1.8.7.jar") '
fi
alias r='fc -s'                                                                                   # execute last command
alias rename='perl /usr/local/bin/rename'
alias rm='rm -i'
alias startxwin='run /usr/bin/bash.exe -l -c "/usr/bin/startxwin -- -nolock -unixkill"'
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'	# add url encoding to path
alias vi='vim'                                                                                    # cygwin installs a minimal vi

if [[ ${BASH_VERSINFO[5]} == *cygwin* ]] || [[ ${BASH_VERSINFO[0]} == 4 ]]; then
	alias l='ls -hBF --color --group-directories-first'
	alias ll='ls -hBF --color --group-directories-first'
else
	alias l='ls -hBF --color'
	alias ll='ls -hBF --color'
fi

if [[ ${BASH_VERSINFO[5]} == *cygwin* ]]; then
	alias clp="printf '%s [%s %s %s] %s\n' '--' `date '+%m/%d %I:%m %p'`  '------------------------------------------------------------------------------------' > /dev/clipboard"
	alias java=~/bin/run-java.sh
	alias javac=~/bin/run-javac.sh
	alias dnt='echo -e `date "+%A %B %d, %Y"`" "`date "+%I:%M %p"` > /dev/clipboard'
	alias dow='date "+%A" > /dev/clipboard'
	alias dtm='printf "[%s %s] " `date "+%y%m%d"` `date "+%H:%M"` > /dev/clipboard'
	alias fdt='date "+%B %d, %Y" > /dev/clipboard'
	alias md='cyg-wrapper.sh "c:\Progra~2\Markdown\MarkdownPad2.exe" --fork=2'
	alias newterm='mintty /bin/env CHERE_INVOKING=1 /bin/bash -l &'
	alias npp='cyg-wrapper.sh "c:\Progra~2\Notepad++\notepad++.exe" --fork=2'			 # run notepad++ in a separate shell
	alias sumatra='startSumatra.sh'
	alias tts='echo [`date "+%I:%M %p"`] > /dev/clipboard'
	alias gvim='cyg-wrapper.sh "C:/Progra~2/Vim/vim74/gvim.exe" --fork=2 --binary-opt=--cmd,"set shellslash",--cmd,"set shell=bash",--cmd,"set ff=unix"'
fi

#------------------------------------------------------------------------------
# setup colors and prompt
#------------------------------------------------------------------------------
# Set up syntax highlighting for 'less' (requires source-highlight package)
# See http://www.gnu.org/software/src-highlite/source-highlight.html
export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
export LESS=' -R '

set_prompt () {
    Last_Command=$? # Must come first!
    local Blue='\[\e[01;34m\]'
    local White='\[\e[01;37m\]'
    local Red='\[\e[01;31m\]'
    local Green='\[\e[01;32m\]'
    local Reset='\[\e[00m\]'
    local FancyX='\342\234\227'
    local Checkmark='\342\234\223'

    # Add a bright white exit status for the last command
    PS1="\n$White\$? "

    # If it was successful, print a green check mark. Otherwise, print
    # a red X.
    if [[ $Last_Command == 0 ]]; then
        PS1+="$Green$Checkmark$Reset "
    else
        PS1+="$Red$FancyX$Reset "
    fi

	# show the command number for reference
	PS1+="[\#]" # should I use \!
    # If root, just print the host in red. Otherwise, print the current user
    # and host in green.
    if [[ $EUID == 0 ]]; then
        PS1+="$Red[\\h]"
    else
        PS1+="$Green[\\u@\\h]"
    fi
    # Print the working directory and prompt marker in blue, and reset
    # the text color to the default.
	PS1+="$Blue[\d \A][\w]$Reset\n\$ "
}
PROMPT_COMMAND='set_prompt'
