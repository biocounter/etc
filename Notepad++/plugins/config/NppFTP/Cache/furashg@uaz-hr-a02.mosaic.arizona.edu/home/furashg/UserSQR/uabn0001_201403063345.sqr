!******************************************************************************
!     uabn0001.sqr:     Recalculate coverage and deduction dates
!******************************************************************************
!******************************************************************************
!  Author:  Scott Watson, TBG
!  Date:    06/30/2009
!  Report Owner:  Benefits
!******************************************************************************
!******************************************************************************
!  Program Summary: This program will locate new benefits and
!           and determine if the coverage or deduction dates need to be
!           recalculated.
!
!
!  Major Tables Used: The major tables used in the report should be
!  listed here in the general order in which they are processed.  The
!  actual table name should be given and an English description.  In
!  addition, the type of table access should be included
!  (ex. read, update, etc.)
!
!  TABLE                DESCRIPTION                 ACCESS
!  -------------        ---------------------       --------------
!
!  input/output Files: The input and output files used in the
!  the report should be listed here in the general order in which
!  they are processed:
!
!  FILE NAME       INPUT/OUTPUT
!  ------------------   ----------------------
!  uabn0001.pdf         Output
!
!  Parameters:  The input and output parameters used in the program
!  should be listed here with descriptions.
!
!  Parameter       In/Out    Description
!  --------------- -------    -------------------------------------
!
!******************************************************************************
!***********************************************************************
!  Modification History:
!  Who    When        Description
!   --------------- ------------- ----------------------------------
!  Jagdeep Kalsi  12/15/2009    Added a new section that will remove base
!              benefits if the event is voided. Changed
!              the column ouput that is displayed. Modified
!              the queries to remove instances of column
!              empl_rcd accessed from Bas Partic to resolve
!              problems due to inconsistency of the
!              defition of empl_rcd in differet tables.
!  Scott Watson   02/11/2010    Added logic to calculate deduction begin dates
!              based on deduction begin override codes.
!  Scott Watson    03/15/2010    Changed coverage begin date based on next available
!              pay begin date to look at pay begin dates
!              greater than coverage elect date, not greater
!              than or equal to.
!  Scott Watson    04/13/2010    Allow replacement of existing base benefit
!              if date calculated already exists.
!       Oscar Hernandez 05/26/2011    Currently the sqr cannot handle specific benefit plan
!                                     overrides, so any date override will be processed to
!                                     all benefit plans in the event rules id and event class.
!                                     Modified the SQR to allow for date overrides based
!                                     on the benefit plan.
!       Oscar Hernandez 06/07/2011    Modified effdt clause when retrieving event date rules
!                                     to use event date instead of SYSDATE.  This will
!                                     allow date recalcs of future dated events.
!       Gary Furash 07/11/2012        HCM-3970 - Added code to set coverage date used in the date
!                                     calculations when election date is less than the event
!  FRILLERA    9/25/2012       HCM-4434 - Incorrectly re-calculating health coverage dates when
!                              no benefit election (coverage elect date) was made.
!  O. Hernandez  9/25/2012     HCM-5018 - Added code to set coverage date used in the date
!                             calculations to election date for FSC events
! FRILLERA    1/7/13          HCM-4064 - Added logic that will recalculate the effective date for
!                             'HIR' events that are reprocessed after employee's waiting period has
!                             expired.
! FURASHG     6/11/2013       HCM-5695 UABN0001 cov/ded eff date recalc logic change
! FRILLERA    7/25/2013       HCM-5896 The state has eliminated the waiting period to which
!                                      HCM-4064 pertained. Commented HCM-5695 and HCM-4064 mod.
! UA_HCM_6115 Andy Orta [andyo] 9/27/2013
! The records UA_EVNT_DT_BP_O and UA_EVNT_DT_CALC were changed. The field UA_EFFDT was
! changed to EFFDT in both records. Changed joins below as appropriate.
! Gary Furash   02/25/2014    HCM-6446 removed comments, fixed exclusion of ASRS1 
!******************************************************************************

!******************************************************************************
!   Setup Section
!******************************************************************************
#Include 'setenv.sqc'                    !Set Environment

#define name    1
#define emplid    22
#define action    32
#define plan_type  47
#define election  59
#define benefit_plan    70
#define covrg_begin     85
#define new_covrg_begin 100
#define ded_begin       115
#define new_ded_begin   130
#define comments  145

#define line_len     180

begin-setup
#Include 'ptset02.sqc'                   !Printer and page-size initialization

declare-variable
  date $as_of_date
  date $effdt
  date $coverage_begin_dt
  date $coverage_end_dt
  date $deduction_begin_dt
  date $deduction_end_dt
  date $new_coverage_begin_dt
  date $new_coverage_end_dt
  date $new_ded_flxc_begin_dt
  date $new_ded_flxc_end_dt
  date $cov_dt_to_use
  date $ded_dt_to_use
  date $hire_dt
end-declare

end-setup

!****************************************************************************
! Heading
!****************************************************************************
begin-HEADING 6

  #include 'uastdhdg.sqc'

  print $report_title  (,) CENTER

  print 'Employee Name' ( +2,{name})
  print 'Empl ID'       ( ,{emplid})
  print 'Action'        ( ,{action})
  print 'Plan Type'     ( ,{plan_type})
  print 'Election'      ( ,{election})
  print 'Benef Plan'    ( ,{benefit_plan})
  print 'Old Covrg'     ( -1,{covrg_begin})
  print 'Begin Date'    ( +1,{covrg_begin})
  print 'New Covrg'     ( -1,{new_covrg_begin})
  print 'Begin Date'    ( +1,{new_covrg_begin})
  print 'Old Ded'       ( -1,{ded_begin})
  print 'Begin Date'    ( +1,{ded_begin})
  print 'New Ded'       ( -1,{new_ded_begin})
  print 'Begin Date'    ( +1,{new_ded_begin})
  print 'Comments'      ( ,{comments})

  graphic (+1,{name},{line_len})    horz-line

end-HEADING

!******************************************************************************
! Program Section
!******************************************************************************
begin-PROGRAM

   do initialization
   do get-as-of-date
   do process-main
   do terminate-program

end-PROGRAM

!******************************************************************************
!  Procedure Name: get-as-of-date
!   Called By:  Program
!  Description:    Pulls the last date the program ran for.  All benefit
!                       events that were closed after this date that require
!                       date recalculation will be selected for processing.
!******************************************************************************
begin-PROCEDURE get-as-of-date

   let $as_of_date = ''
   let $last_process_exists = 'Y'

begin-SELECT

LAST_PROC_DT

   LET $as_of_date = &last_proc_dt

FROM PS_UA_LAST_PROCESS
WHERE PROCESSNAME = 'UABN0001'

end-SELECT

   IF ISNULL($as_of_date)
      LET $last_process_exists = 'N'
      LET $as_of_date = DATEADD(DATENOW(),'DAY',-1)
      SHOW ' '
      SHOW '*******************************************'
      SHOW 'WARNING'
      SHOW 'No last process date found for process.'
      SHOW 'Running for today - 1 day.'
      SHOW '*******************************************'
      SHOW ' '
   END-IF

end-PROCEDURE !get-as-of-date

!*************************************************************************
!   Procedure Name: update-as-of-date
!  Called By:  process-main
!  Description:  Updates the as of date for this process to sysdate
!*************************************************************************
begin-PROCEDURE update-as-of-date

begin-SQL on-error=update-as-of-date-error

UPDATE PS_UA_LAST_PROCESS
   SET LAST_PROC_DT = TRUNC(SYSDATE)
 WHERE PROCESSNAME = 'UABN0001'

end-SQL

end-PROCEDURE !update-as-of-date

!************************************************************************
!   Procedure Name:  insert-as-of-date
!   Called By:  process-main
!  Description:  Inserts the as of date for this process
!************************************************************************
begin-PROCEDURE insert-as-of-date

begin-SQL on-error=insert-as-of-date-error

INSERT INTO PS_UA_LAST_PROCESS (
 PROCESSNAME
,LAST_PROC_DT)
VALUES ('UABN0001'
       ,TRUNC(SYSDATE))

end-SQL

end-PROCEDURE !insert-as-of-date

!***********************************************************************
!  Procedure Name:  initialization
!  Called By:  Program section
!  Description:  Initialize variables
!***********************************************************************
begin-PROCEDURE initialization

  move 1 to #return-status

  DO Init-DateTime                       !datetime.sqc:Init-DateTime
  DO Get-Current-DateTime                !curdttim.sqc:Get-Current-DateTime

  MOVE 'UABN0001' to $ReportID
  MOVE 'Recalculate Coverage Begin and End Dates' to $ReportTitle

  SHOW $ReportID ' ' $ReportTitle ' started at ' $AsOfToday ' ' $AsOfNow

  LET $Dbnamelower = lower($DatabaseName)

  SHOW $ReportTitle
  SHOW 'Database Name:' $DatabaseName
  SHOW 'User Name:' $username

  DO Stdapi-Init                         ! stdapi.sqc

  DO initialize-variables

end-PROCEDURE   initialization

!***********************************************************************
!   Procedure Name: initialize-variables
!       Called By:   initialization
!       Description:    Initialize variables specific to this program.
!***********************************************************************
begin-PROCEDURE initialize-variables

   LET $effdt = ''
   LET $coverage_begin_dt = ''
   LET $coverage_end_dt = ''
   LET $deduction_begin_dt = ''
   LET $deduction_end_dt = ''
   LET $new_coverage_begin_dt = ''
   LET $new_coverage_end_dt = ''
   LET $new_ded_flxc_begin_dt = ''
   LET $new_ded_flxc_end_dt = ''
   LET $plan_type = ' '
   LET $benefit_plan = ' '
   LET $election = ''
   LET $name = ' '
   LET $emplid = ' '
   LET #empl_rcd = 0
   LET #benefit_rcd_num = 0
   LET $action = ''
   LET $comments = ''

end-PROCEDURE !initialize-variables


!***********************************************************************
!  Procedure Name:  process-main
!  Called By:  Program Section
!  Description:  Main procedure of program.
!***********************************************************************
begin-PROCEDURE process-main

LET $previous_emplid = ''
LET $previous_row_type = ''
LET $previous_effdt = ''
LET $previous_cov_beg_cd = ''

begin-SELECT
N.NAME
BP.EMPLID
BP.EMPL_RCD
BP.EVENT_ID
BP.EVENT_CLASS
BP.STATUS_DT
BP.EVENT_DT
BP.FINALIZE_ENROLL
BP.BENEFIT_RCD_NBR
BPP.PLAN_TYPE
BPP.COVERAGE_BEGIN_DT
BPP.DEDUCTION_BEGIN_DT
BPP.COVERAGE_ELECT
BPP.COVERAGE_ELECT_DT
BPO.BENEFIT_PLAN
BPO.COVRG_CD
EDC.UA_COVRG_BEGIN_CD
EDC.UA_COVRG_ENDS_CD
EDC.UA_DED_FLXC_BEG_CD
EDC.UA_DED_FLXC_END_CD
BEC.COVERAGE_BEGINS_CD
BEC.COVERAGE_ENDS_CD
BEC.DED_FLXCR_BEGIN_CD
BEC.DED_FLXCR_END_CD
LAST_DAY(BPP.COVERAGE_ELECT_DT) + 1 &UA_COVRG_BEGIN_DT_B
0                                   &COV_WAIT_PERIOD
''                                  &COV_WP_UNITS
''                                  &COV_NXT_PPE_SW
''                                  &COV_DT_TO_USE
0                                   &DED_WAIT_PERIOD
''                                  &DED_WP_UNITS
''                                  &DED_NXT_PPE_SW
''                                  &DED_DT_TO_USE
BEC.EFFDT                           &RULE_EFFDT
BPP.EVENT_DT
'DOC'                               &ROW_TYPE
   DO initialize-variables

   LET $emplid = &bp.emplid
   IF &ROW_TYPE = 'BPE'
     DO get-hire-date
   END-IF

   DO calculate-dates

   LET $name = &n.name
   LET $plan_type = &bpp.plan_type
   LET $benefit_plan = &bpo.benefit_plan
   LET #benefit_rcd_num = &BP.BENEFIT_RCD_NBR
   LET $deduction_begin_dt = &bpp.deduction_begin_dt

   IF NOT ISNULL($new_coverage_begin_dt) OR
      NOT ISNULL($new_coverage_end_dt) OR
      NOT ISNULL($new_ded_flxc_begin_dt) OR
      NOT ISNULL($new_ded_flxc_end_dt)
      do update-dates
   END-IF

   LET $previous_emplid = $emplid
   LET $previous_row_type = &ROW_TYPE
   LET $previous_effdt = $new_ded_flxc_begin_dt
   LET $previous_cov_beg_cd = &EDC.UA_COVRG_BEGIN_CD
   LET $previous_ded_beg_dt = &BPP.DEDUCTION_BEGIN_DT
   LET $previous_cov_beg_dt = &BPP.COVERAGE_BEGIN_DT

FROM PS_BAS_PARTIC BP
    ,PS_BAS_PARTIC_PLAN BPP
    ,PS_BAS_PARTIC_OPTN BPO
    ,PS_BEN_DEFN_PLAN BDP
    ,PS_BAS_EVENT_CLASS BEC
    ,PS_UA_EVNT_DT_CALC EDC
    ,PS_NAMES N
WHERE BP.EVENT_STATUS = 'C'
  AND BP.BAS_PROCESS_STATUS = 'FE'
  AND BP.SCHED_ID = 'EM'
  AND TRUNC(BP.STATUS_DT) >= $as_of_date
  AND BP.SCHED_ID = BPP.SCHED_ID
  AND BP.EMPLID = BPP.EMPLID
  AND BP.BENEFIT_RCD_NBR = BPP.BENEFIT_RCD_NBR
  AND BP.EVENT_ID = BPP.EVENT_ID
  AND BPP.SCHED_ID = BPO.SCHED_ID
  AND BPP.EMPLID = BPO.EMPLID
  AND BPP.BENEFIT_RCD_NBR = BPO.BENEFIT_RCD_NBR
  AND BPP.EVENT_ID = BPO.EVENT_ID
  AND BPP.PLAN_TYPE = BPO.PLAN_TYPE
  AND BPP.OPTION_CD = BPO.OPTION_CD
  AND BPO.BENEFIT_PLAN <> 'ASRS1'
  AND BP.BENEFIT_PROGRAM = BDP.BENEFIT_PROGRAM
  AND BPP.PLAN_TYPE = BDP.PLAN_TYPE
  AND BDP.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_BEN_DEFN_PLAN
                    WHERE BENEFIT_PROGRAM = BDP.BENEFIT_PROGRAM
                      AND PLAN_TYPE = BDP.PLAN_TYPE
                      AND EFFDT <= BPP.EVENT_DT)
  AND BDP.EVENT_RULES_ID = BEC.EVENT_RULES_ID
  AND BP.EVENT_CLASS = BEC.EVENT_CLASS
  AND BEC.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_BAS_EVENT_CLASS
                    WHERE EVENT_RULES_ID = BEC.EVENT_RULES_ID
                      AND EVENT_CLASS = BEC.EVENT_CLASS
                      AND EFFDT <= BPP.EVENT_DT)
  AND BEC.EVENT_RULES_ID = EDC.EVENT_RULES_ID
  AND BEC.EVENT_CLASS = EDC.EVENT_CLASS
  AND BEC.EFFDT = EDC.EFFDT
  AND EDC.EFF_STATUS = 'A'
  AND BP.EMPLID = N.EMPLID
  AND N.NAME_TYPE = 'PRI'
  AND N.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_NAMES
                  WHERE EMPLID = N.EMPLID
                    AND NAME_TYPE = N.NAME_TYPE)
  AND BPP.ELECTION_MADE <> 'N'
UNION
SELECT
N.NAME,
BP.EMPLID,
BP.EMPL_RCD,
BP.EVENT_ID,
BP.EVENT_CLASS,
BP.STATUS_DT,
BP.EVENT_DT,
BP.FINALIZE_ENROLL,
BP.BENEFIT_RCD_NBR,
BPP.PLAN_TYPE,
BPP.COVERAGE_BEGIN_DT,
BPP.DEDUCTION_BEGIN_DT,
BPP.COVERAGE_ELECT,
BPP.COVERAGE_ELECT_DT,
BPO.BENEFIT_PLAN,
BPO.COVRG_CD,
'',
'',
'',
'',
'',
'',
'',
'',
LAST_DAY(BPP.COVERAGE_ELECT_DT) + 1,
EDC.UA_COVRG_BEG_DT_OV,
EDC.UA_CVG_WT_PRD_UNTS,
EDC.UA_C_NXT_PY_PRD_SW,
EDC.UA_COV_DT_TO_USE,
EDC.UA_DED_FLX_BEG_OVR,
EDC.UA_DED_WT_PRD_UNTS,
EDC.UA_D_NXT_PY_PRD_SW,
EDC.UA_DED_DT_TO_USE,
BEC.EFFDT,
BPP.EVENT_DT,
'BPE'

FROM PS_BAS_PARTIC BP
    ,PS_BAS_PARTIC_PLAN BPP
    ,PS_BAS_PARTIC_OPTN BPO
    ,PS_BEN_DEFN_PLAN BDP
    ,PS_BAS_EVENT_CLASS BEC
    ,PS_UA_EVNT_DT_BP_O EDC
    ,PS_NAMES N
WHERE BP.EVENT_STATUS = 'C'
  AND BP.BAS_PROCESS_STATUS = 'FE'
  AND BP.SCHED_ID = 'EM'
  AND TRUNC(BP.STATUS_DT) >= $as_of_date
  AND BP.SCHED_ID = BPP.SCHED_ID
  AND BP.EMPLID = BPP.EMPLID
  AND BP.BENEFIT_RCD_NBR = BPP.BENEFIT_RCD_NBR
  AND BP.EVENT_ID = BPP.EVENT_ID
  AND BPP.SCHED_ID = BPO.SCHED_ID
  AND BPP.EMPLID = BPO.EMPLID
  AND BPP.BENEFIT_RCD_NBR = BPO.BENEFIT_RCD_NBR
  AND BPP.EVENT_ID = BPO.EVENT_ID
  AND BPP.PLAN_TYPE = BPO.PLAN_TYPE
  AND BPP.OPTION_CD = BPO.OPTION_CD
  AND BP.BENEFIT_PROGRAM = BDP.BENEFIT_PROGRAM
  AND BPP.PLAN_TYPE = BDP.PLAN_TYPE
  AND BDP.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_BEN_DEFN_PLAN
                    WHERE BENEFIT_PROGRAM = BDP.BENEFIT_PROGRAM
                      AND PLAN_TYPE = BDP.PLAN_TYPE
                      AND EFFDT <= BPP.EVENT_DT)
  AND BDP.EVENT_RULES_ID = BEC.EVENT_RULES_ID
  AND BP.EVENT_CLASS = BEC.EVENT_CLASS
  AND BEC.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_BAS_EVENT_CLASS
                    WHERE EVENT_RULES_ID = BEC.EVENT_RULES_ID
                      AND EVENT_CLASS = BEC.EVENT_CLASS
                      AND EFFDT <= BPP.EVENT_DT)
  AND BEC.EVENT_RULES_ID = EDC.EVENT_RULES_ID
  AND BEC.EVENT_CLASS = EDC.EVENT_CLASS
  AND BEC.EFFDT = EDC.EFFDT
  AND BPO.BENEFIT_PLAN = EDC.BENEFIT_PLAN
  AND BP.EMPLID = N.EMPLID
  AND N.NAME_TYPE = 'PRI'
  AND N.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_NAMES
                  WHERE EMPLID = N.EMPLID
                    AND NAME_TYPE = N.NAME_TYPE)
ORDER BY 1, 10, 15, 28 DESC


end-SELECT

   IF #update_count = 0
      PRINT 'No dates where modified.' (+3,1) CENTER
   END-IF

   IF $last_process_exists = 'N'
      DO insert-as-of-date
   ELSE
      DO update-as-of-date
   END-IF

end-PROCEDURE   process-main

!***********************************************************************
!  Procedure Name: calculate-dates
!  Called By:  process-main
!***********************************************************************
begin-PROCEDURE calculate-dates

IF &ROW_TYPE = 'DOC'
   !Coverage Begin Date
   if &bpp.coverage_elect_dt <> ''
     if &BP.EVENT_CLASS = 'FSC'
       let $covrg_dt = &bpp.coverage_elect_dt
     else
       if &bpp.coverage_elect_dt < &BPP.EVENT_DT
         let $covrg_dt = &BPP.EVENT_DT
       else
         let $covrg_dt = &bpp.coverage_elect_dt
       end-if
     end-if
   end-if
   EVALUATE &edc.ua_covrg_begin_cd
       WHEN = 'B'
            LET $new_coverage_begin_dt = &ua_covrg_begin_dt_b
            BREAK
       WHEN = 'C'
            DO get-full-paypd-after-covg
            LET $new_coverage_begin_dt = $new_covrg_dt
            BREAK
       WHEN-OTHER
            LET $new_coverage_begin_dt = ''
            BREAK
   END-EVALUATE

   !Deduction Begin Date (Effdt)

   IF &edc.ua_ded_flxc_beg_cd <> 'A'
      EVALUATE &edc.ua_ded_flxc_beg_cd
          WHEN = 'B'
               LET $new_ded_flxc_begin_dt = &ua_covrg_begin_dt_b
               BREAK
          WHEN = 'C'
               DO get-full-paypd-after-covg
               LET $new_ded_flxc_begin_dt = $new_covrg_dt
               BREAK
          WHEN-OTHER
               LET $new_ded_flxc_begin_dt = ''
               BREAK
      END-EVALUATE
   ELSE
      let $covrg_dt = $new_coverage_begin_dt
      IF NOT ISNULL($new_coverage_begin_dt)
         EVALUATE &bec.ded_flxcr_begin_cd
             WHEN = 'C'
                  LET $new_ded_flxc_begin_dt = $new_coverage_begin_dt
                  BREAK
             WHEN = 'F'
                  DO get-full-paypd-after-covg
                  LET $new_ded_flxc_begin_dt = $new_covrg_dt
                  BREAK
             WHEN = 'P'
                  DO get-pay-pd-containing-covg
                  LET $new_ded_flxc_begin_dt = $new_covrg_dt
                  BREAK
             WHEN = 'R'
                  DO get-pay-pd-preceding-covg
                  LET $new_ded_flxc_begin_dt = $new_covrg_dt
                  BREAK
             WHEN-OTHER
                  LET $new_ded_flxc_begin_dt = ''
                  BREAK
         END-EVALUATE
      END-IF
   END-IF

   !Coverage End Date

   if &bpp.coverage_elect_dt <> ''
     if &BP.EVENT_CLASS = 'FSC'
       let $covrg_dt = &bpp.coverage_elect_dt
     else
       if &bpp.coverage_elect_dt < &BPP.EVENT_DT
         let $covrg_dt = &BPP.EVENT_DT
       else
         let $covrg_dt = &bpp.coverage_elect_dt
       end-if
     end-if
   end-if

   EVALUATE &edc.ua_covrg_ends_cd
       WHEN = 'A'
            LET $new_coverage_end_dt = ''
       WHEN-OTHER
            BREAK
   END-EVALUATE

   !Deduction End Date

   LET $covrg_dt = $new_coverage_end_dt

   IF &edc.ua_ded_flxc_end_cd <> 'A'
      EVALUATE &edc.ua_ded_flxc_end_cd
          WHEN = 'A'
               LET $new_ded_flxc_end_dt = ''
          WHEN-OTHER
               BREAK
      END-EVALUATE
   ELSE
      IF NOT ISNULL($new_coverage_end_dt)
         EVALUATE &bec.ded_flxcr_end_cd
             WHEN = 'E'
                  LET $new_ded_flxc_end_dt = $new_coverage_end_dt
                  BREAK
             WHEN = 'R'
                  DO get-pay-pd-preceding-covg
                  BREAK
             WHEN-OTHER
                  LET $new_ded_flxc_end_dt = ''
                  BREAK
         END-EVALUATE
      END-IF
   END-IF
ELSE
IF &ROW_TYPE = 'BPE'
  LET $hire_dt = &BP.EVENT_DT
  IF &bpo.benefit_plan <> 'ASRS1' OR  (&bpo.benefit_plan = 'ASRS1' AND $hire_dt >= '20-JUL-2011')
    IF &COV_WAIT_PERIOD > 0
      EVALUATE &COV_DT_TO_USE
      WHEN = 'H'
        LET $cov_dt_to_use = $hire_dt
        BREAK
      WHEN = 'D'
        LET $cov_dt_to_use = &BPP.DEDUCTION_BEGIN_DT
        BREAK
      WHEN = 'C'
        LET $cov_dt_to_use = &BPP.COVERAGE_BEGIN_DT
        BREAK
      WHEN = 'E'
        LET $cov_dt_to_use = &BP.EVENT_DT
        BREAK
      WHEN = 'L'
        LET $cov_dt_to_use = &BPP.COVERAGE_ELECT_DT
        BREAK
      END-EVALUATE

      EVALUATE &COV_WP_UNITS
      WHEN = 'D'
        LET #DAYS = &COV_WAIT_PERIOD + 1
        LET $new_coverage_begin_dt = dateadd($cov_dt_to_use, 'day', #DAYS)
        BREAK
      WHEN = 'W'
        LET $new_coverage_begin_dt = dateadd($cov_dt_to_use, 'week', &COV_WAIT_PERIOD)
        LET $new_coverage_begin_dt = dateadd($new_coverage_begin_dt, 'day', 1)
        BREAK
      WHEN = 'M'
        IF substr($cov_dt_to_use, 1, 2) = '01'
          LET #MONTHS = &COV_WAIT_PERIOD
        ELSE
          LET #MONTHS = &COV_WAIT_PERIOD + 1
        END-IF

        LET $new_coverage_begin_dt = dateadd($cov_dt_to_use, 'month', #MONTHS)

        IF substr($new_coverage_begin_dt, 1, 2) <> '01'
          LET $new_coverage_begin_dt = '01' || substr($new_coverage_begin_dt, 3, 9)
        END-IF
        BREAK
      END-EVALUATE

      IF &COV_NXT_PPE_SW = 'Y'
        LET $covrg_dt =  $new_coverage_begin_dt
        DO get-full-paypd-after-covg
        LET $new_coverage_begin_dt = $new_covrg_dt
      END-IF
    END-IF

    IF &DED_WAIT_PERIOD > 0
      EVALUATE &DED_DT_TO_USE
      WHEN = 'H'
        LET $ded_dt_to_use = $hire_dt
        BREAK
      WHEN = 'D'
        LET $ded_dt_to_use = &BPP.DEDUCTION_BEGIN_DT
        BREAK
      WHEN = 'C'
        LET $ded_dt_to_use = &BPP.COVERAGE_BEGIN_DT
        BREAK
      WHEN = 'E'
        LET $ded_dt_to_use = &BP.EVENT_DT
        BREAK
      WHEN = 'L'
        LET $ded_dt_to_use = &BPP.COVERAGE_ELECT_DT
        BREAK
      END-EVALUATE

      EVALUATE &DED_WP_UNITS
      WHEN = 'D'
        LET #DAYS = &DED_WAIT_PERIOD + 1
        LET $new_ded_flxc_begin_dt = dateadd($ded_dt_to_use, 'day', #DAYS)
        BREAK
      WHEN = 'W'
        LET $new_ded_flxc_begin_dt = dateadd($ded_dt_to_use, 'week', &DED_WAIT_PERIOD)
        LET $new_ded_flxc_begin_dt = dateadd($new_ded_flxc_begin_dt, 'day', 1)
        BREAK
      WHEN = 'M'
        IF substr($ded_dt_to_use, 1, 2) = '01'
          LET #MONTHS = &DED_WAIT_PERIOD
        ELSE
          LET #MONTHS = &DED_WAIT_PERIOD + 1
        END-IF

        LET $new_ded_flxc_begin_dt = dateadd($ded_dt_to_use, 'month', #MONTHS)

        IF substr($new_ded_flxc_begin_dt, 1, 2) <> '01'
          LET $new_ded_flxc_begin_dt = '01' || substr($new_ded_flxc_begin_dt, 3, 9)
        END-IF
        BREAK
      END-EVALUATE

      IF &DED_NXT_PPE_SW = 'Y'
        LET $covrg_dt =  $new_ded_flxc_begin_dt
        DO get-full-paypd-after-covg
        LET $new_ded_flxc_begin_dt = $new_covrg_dt
      END-IF
    END-IF
  END-IF
END-IF
END-IF

end-PROCEDURE !calculate-dates


!***********************************************************************
!   Procedure Name: get-full-paypd-after-covg
!   Called By:  calc-ded-flxc-begin-dt
!  Description:  Get the next full pay period date after covrg
!                       begin date.
!***********************************************************************
begin-PROCEDURE get-full-paypd-after-covg

begin-SELECT DISTINCT

MIN(PAY_BEGIN_DT)  &FIRST_FULL_PAY_PD

   LET $new_covrg_dt = &first_full_pay_pd

FROM PS_PAY_CALENDAR
WHERE PAY_OFF_CYCLE_CAL = 'N'
  AND PAY_BEGIN_DT > $covrg_dt      

end-SELECT

end-PROCEDURE !get-full-paypd-after-covg

!***********************************************************************
!   Procedure Name: get-pay-pd-containing-covg
!  Called By:  calc-ua-ded-flxc-begin-dt
!  Description:  Get the pay period begin date where the
!                       covrg begin date is between pay begin and end
!***********************************************************************
begin-PROCEDURE get-pay-pd-containing-covg

begin-SELECT DISTINCT

MAX(PAY_BEGIN_DT)   &CONTAIN_PAY_PD

   LET $new_covrg_dt = &contain_pay_pd

FROM PS_PAY_CALENDAR
WHERE PAY_OFF_CYCLE_CAL = 'N'
  AND PAY_BEGIN_DT <= $covrg_dt

end-SELECT

end-PROCEDURE !get-pay-pd-containing-covg

!***********************************************************************
!   Procedure Name: get-pay-pd-preceding-covg
!  Called By:  calc-ua-ded-flxc-begin-dt
!  Description:    Get the pay period begin date for the pay
!                       period preceeding the coverage begin date.
!***********************************************************************
begin-PROCEDURE get-pay-pd-preceding-covg

begin-SELECT DISTINCT

PC.PAY_BEGIN_DT     &PRECEDING_PAY_PD

   LET $new_covrg_dt = &preceding_pay_pd

FROM PS_PAY_CALENDAR PC
WHERE PC.PAY_OFF_CYCLE_CAL = 'N'
  AND PC.PAY_END_DT = (SELECT MAX(PAY_END_DT)
                         FROM PS_PAY_CALENDAR
                        WHERE COMPANY = PC.COMPANY
                          AND PAYGROUP = PC.PAYGROUP
                          AND PAY_END_DT < $covrg_dt)

end-SELECT

end-PROCEDURE !get-pay-pd-preceding-covg


!***********************************************************************
!   Procedure Name: update-dates
!    Called By:  process-main
!  Description:   Update the coverage deduction dates to recalced
!                       dates
!***********************************************************************
begin-PROCEDURE update-dates

   LET $plan_table = SUBSTR(&bpp.plan_type,1,1)

   EVALUATE $plan_table
       WHEN = '1'
            LET $table_name = 'PS_HEALTH_BENEFIT '
            BREAK
       WHEN = '2'
            LET $table_name = 'PS_LIFE_ADD_BEN '
            BREAK
       WHEN = '3'
            LET $table_name = 'PS_DISABILITY_BEN '
            BREAK
       WHEN = '4'
            LET $table_name = 'PS_SAVINGS_PLAN '
            BREAK
       WHEN = '5'
            LET $table_name = 'PS_LEAVE_PLAN '
            BREAK
       WHEN = '6'
            LET $table_name = 'PS_FSA_BENEFIT '
            BREAK
       WHEN = '7'
            LET $table_name = 'PS_RTRMNT_PLAN '
            BREAK
       WHEN-OTHER
            BREAK
   END-EVALUATE

   IF $plan_table = '5' OR
      $plan_table = '7'
      DO get-plan
      IF $new_ded_flxc_end_dt <> $deduction_end_dt OR
         $new_ded_flxc_begin_dt <> $effdt
         DO check-replace-base-benefits
        IF $dont_replace_base_benefits = '0'
           add 1 to #update_count
           DO update-plan
           DO update-bas-partic-plan
           DO print-update
        ELSE
           IF $plan_type = '7G'
              SHOW 'EmplId: ' $emplid ' - Plan Type: ' $plan_Type
              SHOW 'WARNING: Existing base benefit deleted to avoid unique constraint.'
              SHOW '         Check audit history for details.'
              DO delete-existing-base-benefit
              DO update-plan
              DO update-bas-partic-plan
              DO print-update
            ELSE
              SHOW 'Error: The new dates are going to replace existing base benefits'
              SHOW $emplid
            END-IF
        END-IF
      END-IF
   ELSE
      DO get-benefit
      IF $new_coverage_begin_dt <> $coverage_begin_dt OR
         $new_coverage_end_dt <> $coverage_end_dt OR
         $new_ded_flxc_end_dt <> $deduction_end_dt OR
         $new_ded_flxc_begin_dt <> $effdt

         DO check-replace-base-benefits
         IF $dont_replace_base_benefits = '0'
           add 1 to #update_count
           DO update-benefit
           DO update-bas-partic-plan
          IF $plan_table = '1'
               LET $table_name = 'PS_HEALTH_DEPENDNT'
               DO update-dependent
          ELSE
              IF $plan_table = '2'
                   LET $table_name = 'PS_LIFE_ADD_BENEFC'
                   DO update-dependent
              END-IF
          END-IF
          ELSE
            show 'Error: The new dates are going to replace existing base benefits'
            show $emplid
          END-IF
          DO print-update
       END-IF
   END-IF

end-PROCEDURE !update-dates

!***********************************************************************
!  Procedure Name: get-plan
!  Called By:  update-dates
!  Description:  Select plan info
!***********************************************************************
begin-PROCEDURE get-plan

IF $emplid = $previous_emplid AND $previous_row_type = 'DOC' AND &ROW_TYPE = 'BPE' AND  $previous_cov_beg_cd <> 'A'
   LET $deduction_begin_dt = $previous_effdt

   IF &COV_WAIT_PERIOD = 0
      LET $new_coverage_begin_dt =  $previous_cov_beg_dt
   END-IF
END-IF

begin-SELECT

R.EFFDT
R.DEDUCTION_END_DT

   LET $effdt = &r.effdt
   LET $deduction_end_dt = &r.deduction_end_dt

FROM [$table_name]  R
WHERE R.EMPLID = $emplid
  AND R.EMPL_RCD = #benefit_rcd_num
  AND R.PLAN_TYPE = $plan_type
  AND R.EFFDT = (SELECT MAX(EFFDT)
                   FROM [$table_name]
                  WHERE EMPLID = R.EMPLID
                    AND EMPL_RCD = R.EMPL_RCD
                    AND PLAN_TYPE = R.PLAN_TYPE
                    AND TRUNC(EFFDT) <= $deduction_begin_dt)

end-SELECT

end-PROCEDURE !get-plan

!***********************************************************************
!   Procedure Name: update-plan
!  Called by:  update-dates
!  Description:  Updates coverage and deduction dates on Base Benefits records
!***********************************************************************
begin-PROCEDURE update-plan

begin-SQL

UPDATE [$table_name]
   SET EFFDT = NVL($new_ded_flxc_begin_dt,EFFDT)
      ,DEDUCTION_END_DT = NVL($new_ded_flxc_end_dt,DEDUCTION_END_DT)
 WHERE EMPLID = $emplid
   AND EMPL_RCD = #benefit_rcd_num
   AND PLAN_TYPE = $plan_type
   AND EFFDT = $effdt

end-SQL

end-PROCEDURE !update-benefit

!***********************************************************************
!   Procedure Name: get-benefit
!  Called By:  update-dates
!  Description:    select benefit record
!***********************************************************************
begin-PROCEDURE get-benefit

IF $emplid = $previous_emplid AND $previous_row_type = 'DOC' AND &ROW_TYPE = 'BPE' AND  $previous_cov_beg_cd <> 'A'
   LET $deduction_begin_dt = $previous_effdt

   IF &COV_WAIT_PERIOD = 0
      LET $new_coverage_begin_dt =  $previous_cov_beg_dt
   END-IF
END-IF

begin-SELECT

A.EFFDT
A.DEDUCTION_END_DT
A.COVERAGE_BEGIN_DT
A.COVERAGE_END_DT

   LET $effdt = &a.effdt
   LET $deduction_end_dt = &a.deduction_end_dt
   LET $coverage_begin_dt = &a.coverage_begin_dt
   LET $coverage_end_dt = &a.coverage_end_dt

FROM [$table_name] A
WHERE A.EMPLID = $emplid
  AND A.EMPL_RCD = #benefit_rcd_num
  AND A.PLAN_TYPE = $plan_type
  AND A.EFFDT = (SELECT MAX(EFFDT)
                    FROM [$table_name]
                   WHERE EMPLID = A.EMPLID
                     AND EMPL_RCD = A.EMPL_RCD
                     AND PLAN_TYPE = A.PLAN_TYPE
                     AND TRUNC(EFFDT) <= $deduction_begin_dt)

end-SELECT

end-PROCEDURE !get-benefit

!***********************************************************************
!   Procedure Name: get-hire-date
!  Called By:  main
!  Description:    select EE hire date
!***********************************************************************
begin-PROCEDURE get-hire-date

begin-SELECT
E.REHIRE_DT
E.HIRE_DT

     IF &E.REHIRE_DT > &E.HIRE_DT
       LET $hire_dt = &E.REHIRE_DT
     ELSE
       LET $hire_dt = &E.HIRE_DT
     END-IF

FROM PS_JOB J
INNER JOIN PS_EMPLOYMENT E
ON J.EMPLID = E.EMPLID
AND J.EMPL_RCD = E.EMPL_RCD
WHERE J.EMPL_STATUS NOT IN ('T','R','D','S')
AND J.EFFDT = (SELECT MAX(EFFDT)
  FROM PS_JOB
  WHERE EMPLID = J.EMPLID
  AND EMPL_RCD = J.EMPL_RCD
  AND EFFDT <= &BPP.EVENT_DT)
AND J.EFFSEQ = (SELECT MAX(EFFSEQ)
  FROM PS_JOB
  WHERE EMPLID = J.EMPLID
  AND EMPL_RCD = J.EMPL_RCD
  AND EFFDT = J.EFFDT)
AND J.EMPLID = $emplid
end-SELECT

end-PROCEDURE

!***********************************************************************
!   Procedure Name: update-benefit
!  Called by:  update-dates
!  Description:  Updates coverage and deduction dates on Base Benefits records
!***********************************************************************
begin-PROCEDURE update-benefit

begin-SQL ON-ERROR=update-benefit-error

UPDATE [$table_name]
   SET EFFDT = NVL($new_ded_flxc_begin_dt,EFFDT)
      ,DEDUCTION_END_DT = NVL($new_ded_flxc_end_dt,DEDUCTION_END_DT)
      ,COVERAGE_BEGIN_DT = NVL($new_coverage_begin_dt,COVERAGE_BEGIN_DT)
      ,COVERAGE_END_DT = NVL($new_coverage_end_dt,COVERAGE_END_DT)
 WHERE EMPLID = $emplid
   AND EMPL_RCD = #benefit_rcd_num
   AND PLAN_TYPE = $plan_type
   AND EFFDT = $effdt

end-SQL

end-PROCEDURE !update-benefit

!***********************************************************************
!   Procedure Name: update-bas-partic-plan
!  Called by:  update-dates
!  Description:  Updates the BAS_PARTIC_PLAN table to make sure the event is in sync with the Base Benefits records
!***********************************************************************
begin-PROCEDURE update-bas-partic-plan

IF $emplid = $previous_emplid AND $previous_row_type = 'DOC' AND &ROW_TYPE = 'BPE' AND  $previous_cov_beg_cd <> 'A'
   IF &DED_WAIT_PERIOD = 0
      LET $new_ded_flxc_begin_dt =  $previous_ded_beg_dt
   END-IF
END-IF

begin-SQL ON-ERROR=update-bas-partic-plan-error

UPDATE PS_BAS_PARTIC_PLAN
    SET COVERAGE_BEGIN_DT = NVL($new_coverage_begin_dt,COVERAGE_BEGIN_DT),
  DEDUCTION_BEGIN_DT = NVL($new_ded_flxc_begin_dt,DEDUCTION_BEGIN_DT)
WHERE EMPLID = $emplid
AND PLAN_TYPE = $plan_type
AND EVENT_DT = &BP.EVENT_DT
AND EVENT_ID = &BP.EVENT_ID

end-SQL

end-PROCEDURE !update-bas-partic-plan

!***********************************************************************
!   Procedure Name: update-dependent
!  Called By:  update-dates
!  Description:  sets effdt on health_dependent records.
!***********************************************************************
begin-PROCEDURE update-dependent

begin-SQL ON-ERROR=update-dependent-error

UPDATE [$table_name]
   SET EFFDT = NVL($new_ded_flxc_begin_dt,EFFDT)
 WHERE EMPLID = $emplid
   AND EMPL_RCD = #benefit_rcd_num
   AND PLAN_TYPE = $plan_type
   AND EFFDT = $effdt

end-SQL

end-PROCEDURE !update-dependent


!***********************************************************************
!   Procedure Name: check-replace-base-benefits
!  Called By:  update-dates
!  Description:  Checks if the newly calculated dates are going
!      to overwrite Base Benefits records.
!***********************************************************************
begin-PROCEDURE check-replace-base-benefits

  LET $dont_replace_base_benefits = '0'

begin-SELECT ON-ERROR=check-replace-base-benefits-error
!A.EFFDT &DATE
COUNT(*) &row_ct

  let #row_ct = &row_ct						! 2030415 HCM-6446 G. FURASH
  if #row_ct > 1							! 2030415 HCM-6446 G. FURASH
    LET $dont_replace_base_benefits = '1'
  end-if									! 2030415 HCM-6446 G. FURASH
  
FROM [$table_name] A
WHERE A.EMPLID = $emplid
  AND A.EMPL_RCD = #benefit_rcd_num
  AND A.PLAN_TYPE = $plan_type
!  AND A.EFFDT = $new_ded_flxc_begin_dt
AND A.EFFDT IN ($new_ded_flxc_begin_dt, $effdt)
end-SELECT

end-PROCEDURE !check-replace-base-benefits

!***********************************************************************
!  Procedure Name: delete-existing-base-benefit
!  Called by:  update-dates
!  Description:  Delete existing base benefit before creating new
!***********************************************************************
begin-PROCEDURE delete-existing-base-benefit

begin-SQL ON-ERROR=delete-existing-base-benefit-error

DELETE FROM [$table_name]
WHERE EMPLID = $emplid
  AND EMPL_RCD = #benefit_rcd_nbr
  AND PLAN_TYPE = $plan_type
  AND EFFDT = $new_ded_flxc_begin_dt

end-SQL

end-PROCEDURE !delete-existing-base-benefit

!***********************************************************************
! print-update
!***********************************************************************
begin-PROCEDURE print-update

  LET $print_covrg_begin_dt = DATETOSTR($coverage_begin_dt,'MM/DD/YYYY')
  LET $print_new_covrg_begin_dt = DATETOSTR($new_coverage_begin_dt,'MM/DD/YYYY')
  LET $print_effdt = DATETOSTR($effdt,'MM/DD/YYYY')
  LET $print_new_effdt = DATETOSTR($new_ded_flxc_begin_dt,'MM/DD/YYYY')
  LET $print_covrg_end_dt = DATETOSTR($coverage_end_dt,'MM/DD/YYYY')
  LET $print_new_covrg_end_dt = DATETOSTR($new_coverage_end_dt,'MM/DD/YYYY')
  LET $print_ded_end_dt = DATETOSTR($deduction_end_dt,'MM/DD/YYYY')
  LET $print_new_ded_end_dt = DATETOSTR($new_ded_flxc_end_dt,'MM/DD/YYYY')

  If $benefit_plan = ' '
    LET $election = 'Waive'
  Else
    LET $election = 'Elect'
  End-If

  IF $dont_replace_base_benefits = '0'
      LET $action = 'Updated'
  ELSE
    IF $plan_type = '7G'
       LET $action = 'Updated'
       LET $commment = 'Replaced existing base benefit'
    ELSE
      LET $action = 'Not Updated'
      LET $comments = 'Base Benefits already exists.'
    END-IF
  END-IF

  IF &ROW_TYPE = 'BPE'
     LET $comments = 'Ben Plan Exception. ' || $comments
  END-IF

  print $name        (+2,{name})
  print $emplid       (,{emplid})
  print $action        (,{action})
  print $plan_type      (,{plan_type})
  print $election      (,{election})
  print $benefit_plan             (,{benefit_plan})
  print $print_covrg_begin_dt      (,{covrg_begin})
  print $print_new_covrg_begin_dt    (,{new_covrg_begin})
  print $print_effdt                    (,{ded_begin})
  print $print_new_effdt    (,{new_ded_begin})
  print $comments      (,{comments})

end-PROCEDURE !print-update

!***********************************************************************
!  Procedure Name:  update-prcsrqst-no-success
!  Called By:  update-benefit, update-plan
!  Description:  Updates the Process Run Status so that "No Success"
!               is displayed in the Process Monitor.
!***********************************************************************
begin-PROCEDURE update-prcsrqst-no-success

      LET #prcs_run_status = 10
      DO Update-Prcs-Run-Status          ! prcsapi.sqc

end-PROCEDURE   update-prcsrqst-no-success

!******************************************************************************
! update-as-of-date-error
!******************************************************************************
begin-PROCEDURE update-as-of-date-error

   show ' '
   show ' error in Procedure => ' 'UPDATE-AS-OF-DATE'
   show 'Table 1 in error ==========> ' 'PS_UA_LAST_PROCESS'
   show  'UPDATE PS_UA_LAST_PROCESS'
   show  '   SET LAST_PROC_DT = TRUNC(SYSDATE)'
   show  ' WHERE PROCESSNAME = UABN0001'
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE !update-as-of-date-error

!******************************************************************************
! insert-as-of-date-error
!******************************************************************************
begin-PROCEDURE insert-as-of-date-error

   show ' '
   show 'INSERT error in Procedure => ' 'INSERT-AS-OF-DATE'
   show 'Table 1 in error ==========> ' 'PS_UA_LAST_PROCESS'
   show  'INSERT INTO PS_UA_LAST_PROCESS ('
   show  ' PROCESSNAME'
   show  ',LAST_PROC_DT)'
   show  'VALUES (UABN0001'
   show  '       ,TRUNC(SYSDATE))'
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE !insert-as-of-date-error

!******************************************************************************
! update-benefit-error
!******************************************************************************
begin-PROCEDURE update-benefit-error

   show ' '
   show 'UPDATE error in Procedure => ' 'UPDATE-BENEFIT'
   show 'Table 1 in error ==========> ' $TABLE_NAME
   show 'UPDATE [' $TABLE_NAME ']'
   show '   SET EFFDT = NVL(' $NEW_DED_FLXC_BEGIN_DT  ',EFFDT)'
   show '      ,DEDUCTION_END_DT = NVL(' $NEW_DED_FLXC_END_DT ',DEDUCTION_END_DT)'
   show '      ,COVERAGE_BEGIN_DT = NVL(' $NEW_COVERAGE_BEGIN_DT ',COVERAGE_BEGIN_DT)'
   show '      ,COVERAGE_END_DT = NVL(' $NEW_COVERAGE_END_DT ',COVERAGE_END_DT)'
   show ' WHERE EMPLID = ' $EMPLID
   show '   AND EMPL_RCD = ' #BENEFIT_RCD_NUM
   show '   AND PLAN_TYPE = ' $PLAN_TYPE
   show '   AND EFFDT = ' $EFFDT
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE !update-benefit-error

!******************************************************************************
! update-bas-partic-plan-error
!******************************************************************************
begin-PROCEDURE update-bas-partic-plan-error

   show ' '
   show 'UPDATE error in Procedure => ' 'UPDATE-BAS-PARTIC-PLAN'
   show 'Table 1 in error ==========> PS_BAS_PARTIC_PLAN '
   show 'UPDATE PS_BAS_PARTIC_PLAN'
   show '   SET COVERAGE_BEGIN_DT = NVL(' $NEW_COVERAGE_BEGIN_DT ',COVERAGE_BEGIN_DT)'
   show '      ,DEDUCTION_BEGIN_DT = NVL(' $NEW_DED_FLXC_BEGIN_DT ',EFFDT)'
   show '   WHERE EMPLID = ' $EMPLID
   show '   AND PLAN_TYPE = ' $PLAN_TYPE
   show '   AND EVENT_DT = ' $EFFDT
   show '   AND EVENT_ID = ' &BP.EVENT_ID
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE !update-bas-partic-error

!******************************************************************************
! update-dependent-error
!******************************************************************************
begin-PROCEDURE update-dependent-error

   show ' '
   show 'UPDATE error in Procedure => ' 'UPDATE-DEPENDENT'
   show 'Table 1 in error ==========> ' $TABLE_NAME
   show 'UPDATE [' $TABLE_NAME ']'
   show '   SET EFFDT = NVL(' $NEW_DED_FLXC_BEGIN_DT  ',EFFDT)'
   show ' WHERE EMPLID = ' $EMPLID
   show '   AND EMPL_RCD = ' #BENEFIT_RCD_NUM
   show '   AND PLAN_TYPE = ' $PLAN_TYPE
   show '   AND EFFDT = ' $EFFDT
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE !update-dependent-error

!******************************************************************************
! delete-existing-base-benefit-error
!******************************************************************************
begin-PROCEDURE delete-existing-base-benefit-error

   show ' '
   show 'DELETE error in Procedure => ' 'DELETE-EXISTING-BASE-BENEFIT'
   show 'Table 1 in error ==========> ' $table_name
   show 'DELETE FROM [' $table_name ']'
   show 'WHERE EMPLID = ' $emplid
   show 'AND EMPL_RCD = ' #benefit_rcd_nbr
   show 'AND PLAN_TYPE = ' $plan_type
   show 'AND EFFDT = ' $new_ded_flxc_begin_dt
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE delete-existing-base-benefit-error

!******************************************************************************
! check-replace-base-benefits-error
!******************************************************************************
begin-PROCEDURE check-replace-base-benefits-error

   show ' '
   show 'SELECT error in Procedure => ' 'check-replace-base-benefits'
   show 'Table 1 in error ==========> ' $TABLE_NAME
   show 'SELECT A.EFFDT FROM [' $TABLE_NAME ']'
   show ' WHERE EMPLID = ' $EMPLID
   show '   AND EMPL_RCD = ' #BENEFIT_RCD_NUM
   show '   AND PLAN_TYPE = ' $PLAN_TYPE
   show '   AND EFFDT = ' $NEW_DED_FLXC_BEGIN_DT
   show ' '
   show '******* PROGRAM TERMINATING UNSUCCESSFULLY *******'
   show 'Sql Error     = ' $sql-error
   show 'Sql Status    = ' #sql-status edit 9999999
   show 'RETURN-STATUS = ' #return-status
   do  update-prcsrqst-no-success
   stop

end-PROCEDURE !check-replace-base-benefits-error

!******************************************************************************
! terminate-program
!******************************************************************************
begin-PROCEDURE terminate-program

  DO Get-Current-DateTime

  SHOW $ReportID ' ' $ReportTitle
  SHOW 'Completed at ' $AsOfToday ' ' $AsOfNow

  MOVE 0 to #return-status
  SHOW 'Return-Status = ' #return-status

  COMMIT

  DO Reset                               ! reset.sqc
  DO Stdapi-Term                         ! stdapi.sqc

end-PROCEDURE   !terminate-program


!******************************************************************************
! Include SQCs
!******************************************************************************
#include 'stdapi.sqc'                    !Routines to update run status
#Include 'reset.sqc'                     !Reset printer procedure
#Include 'curdttim.sqc'                  !Get-Current-DateTime procedure
#Include 'datetime.sqc'                  !Routines for date and time formatting
#Include 'number.sqc'                    !Routines to format numbers
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#include 'hrsecty.sqc'                   !Get SQR Security parameters
#Include 'datemath.sqc'                  !HCM-2349 Added sqc call for date calculations
!******************************* End of Program *******************************
